import Foundation

/// ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ö‡∏ô MainActor ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏±‡∏ö UI thread
@MainActor
class MemberStore: ObservableObject {
    @Published var members: [Member] = [] {
        didSet { saveMembers() }
    }
    
    private let key = "saved_members"
    
    // MARK: - Init / Load
    init() {
        loadMembers()
    }
    
    // MARK: - Persistence
    func saveMembers() {
        // ‚úÖ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á: ‡πÉ‡∏ä‡πâ JSONEncoder ‡∏Ñ‡πà‡∏≤ default (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°)
        //  (‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ ISO8601 ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡∏ó‡∏≥ migration ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ)
        do {
            let data = try JSONEncoder().encode(members)
            UserDefaults.standard.set(data, forKey: key)
        } catch {
            assertionFailure("Save members failed: \(error)")
        }
    }
    
    func loadMembers() {
        guard let data = UserDefaults.standard.data(forKey: key) else {
            self.members = []
            return
        }
        // üîÅ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ 2 ‡πÅ‡∏ö‡∏ö: ISO8601 -> default (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤/‡πÉ‡∏´‡∏°‡πà)
        if let decoded = decodeMembers(data: data) {
            self.members = decoded
        } else {
            // ‡∏ñ‡πâ‡∏≤ decode ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏Ñ‡∏£‡∏ä)
            self.members = []
        }
    }
    
    private func decodeMembers(data: Data) -> [Member]? {
        // 1) ‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö ISO8601 (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏õ‡πá‡∏ô ISO8601)
        do {
            let dec = JSONDecoder()
            dec.dateDecodingStrategy = .iso8601
            return try dec.decode([Member].self, from: data)
        } catch {
            // fallthrough
        }
        // 2) ‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö default (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
        do {
            let dec = JSONDecoder()
            return try dec.decode([Member].self, from: data)
        } catch {
            return nil
        }
    }
    
    // MARK: - CRUD Utilities
    func addMember(_ member: Member) {
        members.append(member)
    }
    
    func deleteMember(id: UUID) {
        if let idx = members.firstIndex(where: { $0.id == id }) {
            members.remove(at: idx)
        }
    }
    
    func member(byEmail email: String) -> Member? {
        members.first { $0.email.caseInsensitiveCompare(email) == .orderedSame }
    }
    
    /// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô (‡∏≠‡∏¥‡∏á‡∏ï‡∏≤‡∏° id)
    func updateMember(_ updated: Member) {
        guard let idx = members.firstIndex(where: { $0.id == updated.id }) else { return }
        members[idx] = updated
    }
    
    /// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡πâ‡∏á lastLogin ‡πÅ‡∏•‡∏∞ loginHistory
    func recordLogin(email: String, at date: Date = Date()) {
        guard let idx = members.firstIndex(where: { $0.email.caseInsensitiveCompare(email) == .orderedSame }) else { return }
        members[idx].lastLogin = date
        members[idx].loginHistory.append(date)
        // didSet ‡∏Ç‡∏≠‡∏á members ‡∏à‡∏∞ save ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á
    }
    
    // ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πâ‡∏° tag ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏™‡∏ô‡πÉ‡∏à‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    func incrementTagScore(email: String, tag: String, by value: Int = 1) {
        guard let idx = members.firstIndex(where: { $0.email.caseInsensitiveCompare(email) == .orderedSame }) else { return }
        var dict = members[idx].tagScores
        dict[tag, default: 0] += value
        members[idx].tagScores = dict
    }
    
    func setTagScores(email: String, scores: [String: Int]) {
        guard let idx = members.firstIndex(where: { $0.email.caseInsensitiveCompare(email) == .orderedSame }) else { return }
        members[idx].tagScores = scores
    }
}
