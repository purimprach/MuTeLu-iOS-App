import SwiftUI
import MapKit

struct PlacesMapView: View {
    @EnvironmentObject var language: AppLanguage
    @EnvironmentObject var flowManager: MuTeLuFlowManager
    @EnvironmentObject var locationManager: LocationManager
    
    @StateObject private var viewModel = SacredPlaceViewModel()
    @State private var selectedPlace: SacredPlace?
    @State private var position: MapCameraPosition = .automatic
    
    var body: some View {
        ZStack(alignment: .bottom) {
            MapReader { proxy in
                Map(selection: $selectedPlace) {
                    
                    // --- üëá ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà UserAnnotation() ‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ ---
                    // 1. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if let userCoordinate = locationManager.userLocation?.coordinate {
                        // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Annotation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                        Annotation("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", coordinate: userCoordinate) {
                            // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á View ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏∏‡∏î (‡∏à‡∏∏‡∏î‡∏™‡∏µ‡∏ü‡πâ‡∏≤) ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏≠‡∏á
                            ZStack {
                                Circle()
                                    .fill(Color.blue.opacity(0.2))
                                    .frame(width: 44, height: 44) // ‡∏ß‡∏á‡πÅ‡∏´‡∏ß‡∏ô‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á
                                Circle()
                                    .fill(Color.white)
                                    .frame(width: 20, height: 20) // ‡∏ß‡∏á‡πÅ‡∏´‡∏ß‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
                                Circle()
                                    .fill(Color.blue)
                                    .frame(width: 12, height: 12) // ‡∏à‡∏∏‡∏î‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
                            }
                        }
                    }
                    // -----------------------------------------
                    
                    ForEach(viewModel.places) { place in
                        Marker(
                            language.localized(place.nameTH, place.nameEN),
                            systemImage: "building.columns.fill",
                            coordinate: CLLocationCoordinate2D(latitude: place.latitude, longitude: place.longitude)
                        )
                        .tint(.purple)
                        .tag(place)
                    }
                }
                .mapStyle(.standard(elevation: .realistic))
                .onTapGesture {
                    selectedPlace = nil // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏ï‡∏∞‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                }

                .mapControls {
                    MapUserLocationButton()
                    MapCompass()
                }
            }
            .overlay(alignment: .top) {
                // ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                HStack {
                    Button(action: { flowManager.currentScreen = .home }) {
                        Label(language.localized("‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", "Back"), systemImage: "chevron.left")
                            .padding(.horizontal, 10)
                            .padding(.vertical, 8)
                            .background(.thinMaterial)
                            .clipShape(Capsule())
                            .shadow(radius: 5)
                    }
                    Spacer()
                }
                .padding()
            }
            
            // ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
            if let place = selectedPlace {
                MapDetailCard(place: place)
                    .padding()
                    .transition(.move(edge: .bottom).combined(with: .opacity))
            }
        }
        .animation(.easeInOut, value: selectedPlace)
        .onAppear(perform: setupInitialCamera)
        .onChange(of: selectedPlace) {
            if let place = selectedPlace {
                withAnimation(.easeInOut(duration: 0.5)) {
                    position = .camera(MapCamera(
                        centerCoordinate: CLLocationCoordinate2D(latitude: place.latitude, longitude: place.longitude),
                        distance: 2000
                    ))
                }
            }
        }
    }
    
    private func setupInitialCamera() {
        if let userCoord = locationManager.userLocation?.coordinate {
            position = .camera(MapCamera(centerCoordinate: userCoord, distance: 10000))
        } else {
            let bangkokCoordinate = CLLocationCoordinate2D(latitude: 13.7563, longitude: 100.5018)
            position = .camera(MapCamera(centerCoordinate: bangkokCoordinate, distance: 30000))
        }
    }
}

// (Struct MapDetailCard ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
struct MapDetailCard: View {
    let place: SacredPlace
    @EnvironmentObject var language: AppLanguage
    @EnvironmentObject var flowManager: MuTeLuFlowManager
    
    var body: some View {
        VStack(spacing: 0) {
            Image(place.imageName)
                .resizable()
                .scaledToFill()
                .frame(height: 120)
                .clipped()
            
            VStack(alignment: .leading, spacing: 8) {
                Text(language.localized(place.nameTH, place.nameEN))
                    .font(.headline)
                
                Text(language.localized(place.locationTH, place.locationEN))
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .lineLimit(1)
                
                Button(action: {
                    flowManager.currentScreen = .sacredDetail(place: place)
                }) {
                    Text(language.localized("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", "View Details"))
                        .fontWeight(.bold)
                        .frame(maxWidth: .infinity)
                        .padding(8)
                        .background(Color.purple)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
            }
            .padding()
        }
        .background(.thinMaterial)
        .clipShape(RoundedRectangle(cornerRadius: 12))
        .shadow(radius: 10)
    }
}
