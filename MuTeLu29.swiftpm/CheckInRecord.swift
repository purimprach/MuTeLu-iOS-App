import Foundation

struct CheckInRecord: Codable, Identifiable {
    var id: UUID = UUID()
    let placeID: String
    let placeNameTH: String
    let placeNameEN: String
    let meritPoints: Int
    let memberEmail: String
    var date: Date  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô var ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ admin ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ
    let latitude: Double
    let longitude: Double
    var isEditedByAdmin: Bool = false  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ß‡πà‡∏≤ admin ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
}

class CheckInStore: ObservableObject {
    @Published var records: [CheckInRecord] = []
    
    init() {
        load()
    }
    
    func add(record: CheckInRecord) {
        records.append(record)
        print("‚úÖ Adding check-in record:")
        print("   PlaceID: \(record.placeID)")
        print("   Email: \(record.memberEmail)")
        print("   Date: \(record.date)")
        print("   Total records now: \(records.count)")
        save()
    }
    
    func save() {
        if let data = try? JSONEncoder().encode(records) {
            UserDefaults.standard.set(data, forKey: "checkInRecords")
        }
    }
    
    func load() {
        if let data = UserDefaults.standard.data(forKey: "checkInRecords"),
           let saved = try? JSONDecoder().decode([CheckInRecord].self, from: data) {
            records = saved
            print("üìÇ Loaded \(records.count) check-in records from UserDefaults")
        } else {
            print("üìÇ No existing check-in records found in UserDefaults")
        }
    }
    
    func records(for email: String) -> [CheckInRecord] {
        records.filter { $0.memberEmail == email }
    }
    
    func removeAll(for email: String) {
        records.removeAll { $0.memberEmail == email }
        save()
    }

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    func hasCheckedInRecently(email: String, placeID: String) -> Bool {
        let oneMinuteAgo = Date().addingTimeInterval(-1 * 60) // 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
        let recentCheckIn = records.contains {
            $0.memberEmail == email &&
            $0.placeID == placeID &&
            $0.date >= oneMinuteAgo
        }
        
        // Debug logging
        print("üîç Checking recent check-in:")
        print("   Email: \(email)")
        print("   PlaceID: \(placeID)")
        print("   Total records: \(records.count)")
        print("   Records for this user: \(records.filter { $0.memberEmail == email }.count)")
        print("   Recent check-in exists: \(recentCheckIn)")
        
        if let lastCheckIn = records.filter({ $0.memberEmail == email && $0.placeID == placeID }).max(by: { $0.date < $1.date }) {
            print("   Last check-in date: \(lastCheckIn.date)")
            print("   Time difference: \(Date().timeIntervalSince(lastCheckIn.date)/60) minutes ago")
        }
        
        return recentCheckIn
    }
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
    func hasCheckedInToday(email: String, placeID: String) -> Bool {
        return hasCheckedInRecently(email: email, placeID: placeID)
    }
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    func timeRemainingUntilNextCheckIn(email: String, placeID: String) -> TimeInterval? {
        guard let lastCheckIn = records.filter({ $0.memberEmail == email && $0.placeID == placeID }).max(by: { $0.date < $1.date }) else {
            return nil // ‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô
        }
        
        let nextAllowedTime = lastCheckIn.date.addingTimeInterval(1 * 60) // 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        let now = Date()
        
        if nextAllowedTime > now {
            return nextAllowedTime.timeIntervalSince(now)
        } else {
            return 0 // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
        }
    }
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤ check-in
    func updateCheckInDate(recordID: UUID, newDate: Date) {
        if let index = records.firstIndex(where: { $0.id == recordID }) {
            records[index].date = newDate
            records[index].isEditedByAdmin = true
            save()
        }
    }
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤ check-in record ‡∏ï‡∏≤‡∏° ID
    func getRecord(by id: UUID) -> CheckInRecord? {
        return records.first { $0.id == id }
    }
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö check-in record ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    func removeRecord(by id: UUID) {
        records.removeAll { $0.id == id }
        save()
    }
}
